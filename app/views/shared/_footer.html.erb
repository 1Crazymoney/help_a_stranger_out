<div class="footer" style="text-align:center" id="footer">
  <%= content_tag :div, class: "public_deeds_list", data: {public_deeds: @public_deeds} do %>
  <% end %>
</div>

<!-- google analytics -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  // your property code
  ga('create', 'UA-XXXXXXXXXX', 'auto');
  ga('send', 'pageview');
</script>

<script src="https://cdn.orangecss.com/1.0.0/js/orange.min.js"></script>

<script type="text/javascript">
  var Constants = {
    path: 'deeds',
  }

  var Deed = {
    init: function(data) {
      this.id = data.id;
      this.title = data.title;
      this.description = data.description;
      this.thumbnail = data.thumbnail;
      this.funding_amount = data.funding_amount;
      this.count_completed = data.count_completed;
      this.count_in_progress = data.count_in_progress;
      this.count_smiles_given = data.count_smiles_given;
      this.count_stories = data.count_stories;
      return this;
    }
  }

  var TemplateManager = {
    promisePublicDeeds: function() {
      return new Promise(function(resolve, reject) {
        var json = JSON.parse(TemplateManager.publicDeeds());
        resolve(json);
      });
    },
    loadPublicDeeds: function(callback) {
      this.promisePublicDeeds().then(function(json, callback) {
        TemplateManager.updatePublicDeeds(json);
        return PublicDeedList.all;
      }).then(function(data) {
        callback(data);
      })
    },
    publicDeeds: function() {
      return document.querySelector('.public_deeds_list').getAttribute('data-public-deeds');
    },
    updatePublicDeeds: function(json) {
      PublicDeedList.init(json);
      return 'true';
    },
    loadUserDeeds: function(callback) {
      BlockstackManager.session.getFile(Constants.path, BlockstackManager.getOpts()).then((file) => {
        gottenDeeds = JSON.parse(file);
        if (!!gottenDeeds) {
          UserDeedList.all = gottenDeeds;
        }
        inProgress = UserDeedList.sortInProgress();
        completed = UserDeedList.sortCompleted();
        callback(inProgress, completed);
      });
    },
  }

// For local storage and database
  var DeedManager = {
    create: function(data) {
      $.ajax({
        url: '/deeds',
        type: 'post',
        dataType: 'json',
        data: data,
        success: function(json) {
          DeedManager.addDeed(json);
          window.location.pathname = '/profile';
        }
      });
    },
    addDeed: function(data) {
      var deed = Object.create(Deed); // when user creates a new Deed through form
      deed.init(data);
      this.list.add(deed);
    },
    removeDeed: function(id) {
      this.list.remove(id);
    },
    init: function() {
      var deedList = Object.create(PublicDeedList);
      this.list = deedList.init();
      return this;
    }
  }
//Handles community list
  var PublicDeedList = {
    add: function(deed) {
      PublicDeedList.all.push(deed);
      UserDeedList.add(deed);
    },
    getById: function(id) {

    },
    findById: function(id) {
      return this.all.find(function(deed, idx) {
        return id == deed.id;
      });
    },
    download: function(data) {
      this.all = data;
    },
    update: function(data, id) {
      var deed = this.findById(id);
      deed.title = data.title;
      deed.description = data.description;
      deed.thumbnail = data.thumbnail;
    },
    all: [], // keeps all detailed deeds
    init: function(deeds) {
      this.all = deeds;
      return this;
    }
  }

  // For Blockstack storage
  var UserDeedList = {
    init: function() {
      BlockstackManager.session.getFile(Constants.path, BlockstackManager.getOpts()).then((file) => {
        gottenDeeds = JSON.parse(file);
        if (!!gottenDeeds) {
          this.all = gottenDeeds;
        }
      });
    },
    markComplete: function(id) {
      var deeds = UserDeedList.all;
      deeds.forEach(function(deed) {
        if (deed.id == id) {
          deed.completed_at = new Date();
        }
      });
      this.pushDeedList();
    },
    all: [],
    sortInProgress: function() {
      var all = this.all || [];
      return all.filter(deed => !deed.completed_at);
    },
    sortCompleted: function() {
      var all = this.all || [];
      return all.filter(deed => !!deed.completed_at);
    },
    prepareObj: function(deed) {
      deed['started_at'] = new Date();
      deed['completed_at'] = null;
      return deed;
    },
    prepare: function(deed) {
      var obj = this.prepareObj(deed);
      this.all.push(obj);
    },
    add: function(deed) {
      this.prepare(deed);
      this.pushDeedList();
    },
    alreadyIncluded: function(deed) {
      if (this.all.includes(deed)) {
        alert("Error! Already included in your deed list");
      }
    },
    delete: function(id) {
      UserDeedList.all.forEach(function(deed, idx) {
        if (deed.id == id) {
          UserDeedList.all.splice(idx, 1);
        }
      });
      this.pushDeedList();
    },
    pushDeedList: function() {
      BlockstackManager.putFile(this.pushCallback.bind(this));
    },
    pushCallback: function() {
      alert('Updated your deeds list!');
    }
  }

  var BlockstackManager = {
    init: function(session) {
      this.session = session;
      this.userData = session.loadUserData();
      return this;
    },
    signedIn: function() {
      return this.userDataExists();
    },
    userDataExists: function() {
      return (this.userData !== undefined)
    },
    getOpts: function() {
      return {decrypt: this.userData.appPrivateKey, verify: true}
    },
    putOpts: function() {
      return {'Content-Type': 'json', sign: this.userData.appPrivateKey}
    },
    getFile: function(callback) {
      BlockstackManager.session.getFile(Constants.path, BlockstackManager.getOpts()).then((file) => {
        callback(file);
      });
    },
    putFile: function(callback) {
      BlockstackManager.session.putFile(Constants.path, JSON.stringify(UserDeedList.all), this.putOpts()).then((data) => {
        callback();
      });
    }
  }

  BlockstackManager.init(blockstackSession);
  DeedManager.init();
  UserDeedList.init();
</script>
